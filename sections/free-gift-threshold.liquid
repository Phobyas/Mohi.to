{% comment %}
  Free Gift Threshold Section - Simple Version with Blocks
  File: sections/free-gift-threshold.liquid
{% endcomment %}

{%- liquid
  # Get settings
  assign threshold_amount = section.settings.threshold | times: 100
  assign cart_total = cart.total_price
  assign remaining = threshold_amount | minus: cart_total
  
  # Check if threshold is met
  if cart_total >= threshold_amount
    assign threshold_met = true
  else
    assign threshold_met = false
  endif
  
  # Calculate progress
  assign progress_percentage = 0
  if cart_total > 0 and threshold_amount > 0
    assign progress_percentage = cart_total | times: 100.0 | divided_by: threshold_amount
    if progress_percentage > 100
      assign progress_percentage = 100
    endif
  endif
  
  # Check if any gift is already in cart
  assign has_gift = false
  assign selected_gift_info = ''
  
  for item in cart.items
    if item.properties._is_free_gift == 'true'
      assign has_gift = true
      assign selected_gift_info = item.product.title
      if item.variant.title != 'Default Title'
        assign selected_gift_info = selected_gift_info | append: ' - ' | append: item.variant.title
      endif
      break
    endif
  endfor
-%}

<div class="free-gift-threshold" 
     data-threshold="{{ threshold_amount }}"
     data-section-id="{{ section.id }}">

  <div class="gift-container">
    <!-- Progress State -->
    <div class="gift-state gift-state--progress" data-state="progress" style="{% if has_gift or threshold_met %}display: none;{% endif %}">
      <h3 class="gift-header">
        <span class="gift-icon">üéÅ</span>
        {{ section.settings.title }}
      </h3>
      
      <p class="gift-message">
        {{ section.settings.progress_message | replace: '[amount]', '<strong class="remaining-amount" data-amount="' | append: remaining | append: '">' | append: remaining | money | append: '</strong>' }}
      </p>
      
      {%- if section.settings.show_progress_bar -%}
        <div class="gift-progress-bar">
          <div class="gift-progress-fill" data-progress="{{ progress_percentage }}" style="width: {{ progress_percentage }}%"></div>
        </div>
        <p class="gift-progress-text">
          <span class="progress-percentage">{{ progress_percentage | round }}</span>% do darmowego prezentu
        </p>
      {%- endif -%}
    </div>

    <!-- Selector State -->
    <div class="gift-state gift-state--selector" data-state="selector" style="{% unless threshold_met and has_gift == false %}display: none;{% endunless %}">
      <h3 class="gift-header">
        <span class="gift-icon">üéâ</span>
        {{ section.settings.title }}
      </h3>
      
      <p class="gift-message">{{ section.settings.threshold_message }}</p>
      
      <!-- Gift Products Grid -->
      <div class="gift-products-grid">
        {%- assign has_products = false -%}
        {%- for block in section.blocks -%}
          {%- if block.type == 'gift_product' -%}
            {%- assign product = all_products[block.settings.product] -%}
            {%- if product and product.available -%}
              {%- assign has_products = true -%}
              <div class="gift-product-card" data-product-id="{{ product.id }}">
                {%- if product.featured_image -%}
                  <div class="gift-product-image-wrapper">
                    <img src="{{ product.featured_image | image_url: width: 200 }}" 
                         alt="{{ product.title | escape }}"
                         class="gift-product-image"
                         loading="lazy">
                  </div>
                {%- endif -%}
                
                <h4 class="gift-product-title">{{ product.title | truncate: 40 }}</h4>
                
                {%- if product.variants.size > 1 -%}
                  <select class="gift-variant-select" data-product-id="{{ product.id }}">
                    <option value="">Wybierz wariant...</option>
                    {%- for variant in product.variants -%}
                      {%- if variant.available -%}
                        <option value="{{ variant.id }}" 
                                data-title="{{ variant.title | escape }}"
                                data-price="{{ variant.price }}"
                                data-image="{% if variant.image %}{{ variant.image | image_url: width: 200 }}{% else %}{{ product.featured_image | image_url: width: 200 }}{% endif %}">
                          {{ variant.title }}
                        </option>
                      {%- endif -%}
                    {%- endfor -%}
                  </select>
                {%- else -%}
                  {%- assign first_variant = product.variants.first -%}
                  {%- if first_variant and first_variant.available -%}
                    <button class="gift-select-btn"
                            data-variant-id="{{ first_variant.id }}"
                            data-title="{{ product.title | escape }}"
                            data-price="{{ first_variant.price }}"
                            data-image="{{ product.featured_image | image_url: width: 200 }}">
                      Wybierz
                    </button>
                  {%- endif -%}
                {%- endif -%}
              </div>
            {%- endif -%}
          {%- endif -%}
        {%- endfor -%}
        
        {%- unless has_products -%}
          <p style="text-align: center; color: #6b7280; padding: 20px;">
            Brak dostƒôpnych produkt√≥w. Dodaj produkty u≈ºywajƒÖc blok√≥w w edytorze motywu.
          </p>
        {%- endunless -%}
      </div>
      
      <!-- Selected Product Display -->
      <div class="gift-selected" style="display: none;">
        <div class="gift-selected-info">
          <img class="gift-selected-image" src="" alt="">
          <div class="gift-selected-details">
            <h4>Wybrany prezent:</h4>
            <p class="gift-selected-title"></p>
          </div>
        </div>
        <button class="gift-button-primary gift-add-btn">
          {{ section.settings.add_button_text }}
        </button>
      </div>
    </div>

    <!-- Success State -->
    <div class="gift-state gift-state--success" data-state="success" style="{% unless has_gift %}display: none;{% endunless %}">
      <h3 class="gift-header">
        <span class="gift-icon">‚úì</span>
        {{ section.settings.title }}
      </h3>
      
      <div class="gift-success-message">
        <p><strong>{{ section.settings.success_message }}</strong></p>
        {%- if selected_gift_info != blank -%}
          <p class="gift-selected-info-text">Wybrany prezent: {{ selected_gift_info }}</p>
        {%- endif -%}
      </div>
    </div>
  </div>

</div>

<style>
  .free-gift-threshold {
    max-width: 1200px;
    margin: 0 auto 20px;
  }
  
  .gift-container {
    background: {{ section.settings.background_color }};
    border: 1px solid {{ section.settings.border_color }};
    border-radius: 8px;
    padding: 20px;
    transition: opacity 0.3s ease;
  }
  
  .gift-state {
    animation: fadeIn 0.3s ease;
  }
  
  @keyframes fadeIn {
    from { opacity: 0; }
    to { opacity: 1; }
  }
  
  .gift-header {
    color: {{ section.settings.heading_color }};
    font-size: 18px;
    font-weight: 600;
    margin: 0 0 15px 0;
    display: flex;
    align-items: center;
    gap: 8px;
  }
  
  .gift-icon {
    font-size: 20px;
  }
  
  .gift-message {
    color: {{ section.settings.text_color }};
    margin-bottom: 15px;
    font-size: 14px;
  }
  
  .gift-message strong {
    color: {{ section.settings.accent_color }};
    font-size: 16px;
  }
  
  .gift-progress-bar {
    height: 8px;
    background: #e5e7eb;
    border-radius: 4px;
    overflow: hidden;
    margin: 12px 0 8px;
  }
  
  .gift-progress-fill {
    height: 100%;
    background: linear-gradient(90deg, #10b981, #059669);
    transition: width 0.5s ease;
  }
  
  .gift-progress-text {
    font-size: 12px;
    color: #6b7280;
    margin: 0;
  }
  
  .gift-products-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(140px, 1fr));
    gap: 12px;
    max-height: 320px;
    overflow-y: auto;
    padding: 15px;
    background: #f9fafb;
    border: 1px solid #e5e7eb;
    border-radius: 6px;
    margin-bottom: 15px;
  }
  
  .gift-products-grid::-webkit-scrollbar {
    width: 6px;
  }
  
  .gift-products-grid::-webkit-scrollbar-track {
    background: #f3f4f6;
    border-radius: 3px;
  }
  
  .gift-products-grid::-webkit-scrollbar-thumb {
    background: #d1d5db;
    border-radius: 3px;
  }
  
  .gift-product-card {
    background: white;
    border: 1px solid #e5e7eb;
    border-radius: 6px;
    padding: 10px;
    text-align: center;
    transition: all 0.2s ease;
    cursor: pointer;
  }
  
  .gift-product-card:hover {
    border-color: {{ section.settings.accent_color }};
    transform: translateY(-1px);
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.08);
  }
  
  .gift-product-card.selected {
    border-color: #10b981;
    background: #f0fdf4;
  }
  
  .gift-product-image-wrapper {
    width: 100%;
    height: 100px;
    margin-bottom: 8px;
    display: flex;
    align-items: center;
    justify-content: center;
    background: #f9fafb;
    border-radius: 4px;
  }
  
  .gift-product-image {
    max-width: 100%;
    max-height: 100%;
    object-fit: contain;
  }
  
  .gift-product-title {
    font-size: 12px;
    margin: 0 0 8px 0;
    color: #374151;
    line-height: 1.3;
    min-height: 30px;
  }
  
  .gift-variant-select,
  .gift-select-btn {
    width: 100%;
    padding: 6px;
    font-size: 12px;
    border-radius: 4px;
    cursor: pointer;
  }
  
  .gift-variant-select {
    border: 1px solid #d1d5db;
    background: white;
  }
  
  .gift-select-btn {
    background: {{ section.settings.button_color }};
    color: {{ section.settings.button_text_color }};
    border: none;
    font-weight: 500;
    transition: opacity 0.2s;
  }
  
  .gift-select-btn:hover {
    opacity: 0.85;
  }
  
  .gift-selected {
    padding: 15px;
    background: #f0fdf4;
    border: 1px solid #10b981;
    border-radius: 6px;
    margin-top: 15px;
  }
  
  .gift-selected-info {
    display: flex;
    gap: 12px;
    margin-bottom: 12px;
  }
  
  .gift-selected-image {
    width: 60px;
    height: 60px;
    object-fit: contain;
    background: white;
    border-radius: 4px;
    padding: 4px;
  }
  
  .gift-selected-details h4 {
    margin: 0 0 4px 0;
    color: #065f46;
    font-size: 13px;
  }
  
  .gift-selected-title {
    margin: 0;
    font-size: 14px;
    color: #374151;
    font-weight: 500;
  }
  
  .gift-button-primary {
    width: 100%;
    padding: 10px 16px;
    background: linear-gradient(135deg, #10b981, #059669);
    color: white;
    border: none;
    border-radius: 6px;
    font-size: 14px;
    font-weight: 600;
    cursor: pointer;
    transition: transform 0.2s;
  }
  
  .gift-button-primary:hover:not(:disabled) {
    transform: translateY(-1px);
    box-shadow: 0 3px 10px rgba(16, 185, 129, 0.25);
  }
  
  .gift-button-primary:disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }
  
  .gift-success-message {
    padding: 12px;
    background: #f0fdf4;
    border-left: 3px solid #10b981;
    border-radius: 4px;
  }
  
  .gift-success-message p {
    margin: 0;
    color: #065f46;
    font-size: 14px;
  }
  
  .gift-selected-info-text {
    margin-top: 6px !important;
    font-size: 13px !important;
    opacity: 0.9;
  }
  
  /* Notification */
  .gift-notification {
    position: fixed;
    top: 20px;
    right: 20px;
    padding: 12px 16px;
    border-radius: 6px;
    font-size: 14px;
    font-weight: 500;
    z-index: 99999;
    max-width: 280px;
    box-shadow: 0 4px 12px rgba(0,0,0,0.12);
    animation: slideIn 0.3s ease;
  }
  
  .gift-notification--success {
    background: #10b981;
    color: white;
  }
  
  .gift-notification--warning {
    background: #f59e0b;
    color: white;
  }
  
  .gift-notification--error {
    background: #ef4444;
    color: white;
  }
  
  @keyframes slideIn {
    from {
      transform: translateX(100%);
      opacity: 0;
    }
    to {
      transform: translateX(0);
      opacity: 1;
    }
  }
  
  @media (max-width: 640px) {
    .gift-products-grid {
      grid-template-columns: repeat(auto-fill, minmax(120px, 1fr));
      gap: 10px;
      padding: 12px;
    }
    
    .gift-container {
      padding: 15px;
    }
  }
</style>

<script>
(function() {
  class FreeGiftManager {
    constructor(section) {
      this.section = section;
      this.threshold = parseInt(section.dataset.threshold);
      this.sectionId = section.dataset.sectionId;
      this.selectedGift = null;
      this.isProcessing = false;
      this.cartData = null;
      
      this.init();
    }
    
    async init() {
      // Get initial cart state
      await this.fetchCart();
      
      // Set up event listeners
      this.attachEventListeners();
      
      // Monitor cart changes
      this.monitorCartChanges();
      
      // Initial UI update
      this.updateUI();
    }
    
    attachEventListeners() {
      // Product selection
      this.section.addEventListener('click', (e) => {
        if (e.target.classList.contains('gift-select-btn')) {
          this.selectProduct(e.target);
        }
      });
      
      // Variant selection
      this.section.addEventListener('change', (e) => {
        if (e.target.classList.contains('gift-variant-select')) {
          this.selectVariant(e.target);
        }
      });
      
      // Add gift button
      const addBtn = this.section.querySelector('.gift-add-btn');
      if (addBtn) {
        addBtn.addEventListener('click', () => this.addGiftToCart());
      }
    }
    
    monitorCartChanges() {
      // Listen to Dawn theme cart events if available
      if (typeof subscribe !== 'undefined' && typeof PUB_SUB_EVENTS !== 'undefined') {
        subscribe(PUB_SUB_EVENTS.cartUpdate, async (event) => {
          // Skip if this update was triggered by our gift manager
          if (event.source === 'free-gift-add' || event.source === 'free-gift-remove') {
            return;
          }
          
          // Fetch fresh cart data
          await this.fetchCart();
          this.updateUI();
        });
      }
      
      // Intercept cart API calls
      const originalFetch = window.fetch;
      window.fetch = async (...args) => {
        const response = await originalFetch.apply(window, args);
        const url = args[0];
        
        if (typeof url === 'string' && 
            (url.includes('/cart/add') || 
             url.includes('/cart/update') || 
             url.includes('/cart/change') || 
             url.includes('/cart/clear'))) {
          
          // Skip if it's our own request
          const body = args[1]?.body;
          if (body && body.includes('_is_free_gift')) {
            return response;
          }
          
          // Wait a bit for cart to update
          setTimeout(async () => {
            await this.fetchCart();
            this.updateUI();
          }, 100);
        }
        
        return response;
      };
      
      // Listen for quantity changes in cart
      document.addEventListener('change', async (e) => {
        if (e.target.matches('[name="updates[]"], .quantity__input')) {
          setTimeout(async () => {
            await this.fetchCart();
            this.updateUI();
          }, 500);
        }
      });
      
      // Listen for remove button clicks
      document.addEventListener('click', async (e) => {
        if (e.target.closest('cart-remove-button, [href*="/cart/change"], .cart-item__remove')) {
          setTimeout(async () => {
            await this.fetchCart();
            this.updateUI();
          }, 500);
        }
      });
    }
    
    async fetchCart() {
      try {
        const response = await fetch(window.Shopify.routes.root + 'cart.js');
        this.cartData = await response.json();
        
        // Store globally for quantity protection
        window.cartData = this.cartData;
        
        // Protect quantities after cart fetch
        setTimeout(() => {
          window.protectGiftQuantities && window.protectGiftQuantities();
        }, 100);
        
        return this.cartData;
      } catch (error) {
        console.error('Error fetching cart:', error);
        return null;
      }
    }
    
    updateUI() {
      if (!this.cartData) return;
      
      const states = {
        progress: this.section.querySelector('.gift-state--progress'),
        selector: this.section.querySelector('.gift-state--selector'),
        success: this.section.querySelector('.gift-state--success')
      };
      
      // Check for existing gift
      const giftItem = this.cartData.items.find(item => 
        item.properties && item.properties._is_free_gift === 'true'
      );
      const hasGift = !!giftItem;
      
      // Determine current state
      const thresholdMet = this.cartData.total_price >= this.threshold;
      
      // Check if gift needs to be removed (has gift but threshold not met)
      if (hasGift && !thresholdMet) {
        // Don't update UI yet, wait for gift removal
        this.removeGift();
        return;
      }
      
      // Hide all states
      Object.values(states).forEach(state => {
        if (state) state.style.display = 'none';
      });
      
      // Show appropriate state
      if (hasGift) {
        if (states.success) {
          states.success.style.display = 'block';
          this.updateSuccessInfo();
        }
      } else if (thresholdMet) {
        if (states.selector) {
          states.selector.style.display = 'block';
        }
      } else {
        if (states.progress) {
          states.progress.style.display = 'block';
          this.updateProgress();
        }
      }
    }
    
    updateProgress() {
      const remaining = Math.max(0, this.threshold - this.cartData.total_price);
      const percentage = Math.min((this.cartData.total_price / this.threshold) * 100, 100);
      
      // Update remaining amount
      const remainingEl = this.section.querySelector('.remaining-amount');
      if (remainingEl) {
        remainingEl.textContent = this.formatMoney(remaining);
      }
      
      // Update progress bar
      const progressFill = this.section.querySelector('.gift-progress-fill');
      if (progressFill) {
        progressFill.style.width = percentage + '%';
      }
      
      // Update percentage text
      const percentageEl = this.section.querySelector('.progress-percentage');
      if (percentageEl) {
        percentageEl.textContent = Math.round(percentage);
      }
    }
    
    updateSuccessInfo() {
      const giftItem = this.cartData.items.find(item => 
        item.properties && item.properties._is_free_gift === 'true'
      );
      
      if (giftItem) {
        const infoEl = this.section.querySelector('.gift-selected-info-text');
        if (infoEl) {
          let title = giftItem.product_title;
          if (giftItem.variant_title && giftItem.variant_title !== 'Default Title') {
            title += ' - ' + giftItem.variant_title;
          }
          infoEl.textContent = 'Wybrany prezent: ' + title;
        }
      }
    }
    
    selectProduct(button) {
      // Clear previous selections
      this.section.querySelectorAll('.gift-product-card').forEach(card => {
        card.classList.remove('selected');
      });
      
      // Mark as selected
      const card = button.closest('.gift-product-card');
      card.classList.add('selected');
      
      // Store selection
      this.selectedGift = {
        variantId: button.dataset.variantId,
        title: button.dataset.title,
        price: button.dataset.price,
        image: button.dataset.image
      };
      
      this.showSelectedGift();
    }
    
    selectVariant(select) {
      if (!select.value) return;
      
      // Clear previous selections
      this.section.querySelectorAll('.gift-product-card').forEach(card => {
        card.classList.remove('selected');
      });
      
      // Mark as selected
      const card = select.closest('.gift-product-card');
      card.classList.add('selected');
      
      const option = select.options[select.selectedIndex];
      
      // Store selection
      this.selectedGift = {
        variantId: select.value,
        title: card.querySelector('.gift-product-title').textContent + 
               (option.dataset.title !== 'Default Title' ? ' - ' + option.dataset.title : ''),
        price: option.dataset.price,
        image: option.dataset.image
      };
      
      this.showSelectedGift();
    }
    
    showSelectedGift() {
      const selectedDiv = this.section.querySelector('.gift-selected');
      if (!selectedDiv || !this.selectedGift) return;
      
      // Update image
      const img = selectedDiv.querySelector('.gift-selected-image');
      if (img) {
        img.src = this.selectedGift.image;
        img.alt = this.selectedGift.title;
      }
      
      // Update title
      const titleEl = selectedDiv.querySelector('.gift-selected-title');
      if (titleEl) {
        titleEl.textContent = this.selectedGift.title;
      }
      
      // Show the selected div
      selectedDiv.style.display = 'block';
      selectedDiv.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
    }
    
    async addGiftToCart() {
      if (this.isProcessing || !this.selectedGift) return;
      
      // Security check - verify threshold is met
      await this.fetchCart();
      if (this.cartData.total_price < this.threshold) {
        this.showNotification('Koszyk nie spe≈Çnia wymaganego progu', 'error');
        this.updateUI();
        return;
      }
      
      // Check if gift already exists
      const existingGift = this.cartData.items.find(item => 
        item.properties && item.properties._is_free_gift === 'true'
      );
      
      if (existingGift) {
        this.showNotification('Prezent jest ju≈º w koszyku', 'warning');
        return;
      }
      
      const button = this.section.querySelector('.gift-add-btn');
      if (!button) return;
      
      this.isProcessing = true;
      button.disabled = true;
      button.textContent = 'Dodawanie...';
      
      try {
        const formData = {
          items: [{
            id: parseInt(this.selectedGift.variantId),
            quantity: 1,
            properties: {
              '_is_free_gift': 'true',
              '_original_price': this.selectedGift.price,
              '_threshold_required': this.threshold.toString()
            }
          }]
        };
        
        const response = await fetch(window.Shopify.routes.root + 'cart/add.js', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(formData)
        });
        
        if (!response.ok) {
          const error = await response.json();
          throw new Error(error.description || 'B≈ÇƒÖd dodawania prezentu');
        }
        
        // Show success
        button.textContent = '‚úì Dodano!';
        this.showNotification('Prezent zosta≈Ç dodany do koszyka!', 'success');
        
        // Refresh cart
        await this.fetchCart();
        this.updateUI();
        
        // Trigger cart update event if available
        if (typeof publish !== 'undefined' && typeof PUB_SUB_EVENTS !== 'undefined') {
          publish(PUB_SUB_EVENTS.cartUpdate, { source: 'free-gift-add' });
        }
        
      } catch (error) {
        console.error('Error adding gift:', error);
        button.textContent = 'Spr√≥buj ponownie';
        this.showNotification('Nie mo≈ºna dodaƒá prezentu: ' + error.message, 'error');
      } finally {
        this.isProcessing = false;
        
        setTimeout(() => {
          if (button) {
            button.disabled = false;
            button.textContent = '{{ section.settings.add_button_text }}';
          }
        }, 2000);
      }
    }
    
    async removeGift() {
      const giftItem = this.cartData.items.find(item => 
        item.properties && item.properties._is_free_gift === 'true'
      );
      
      if (!giftItem) return;
      
      // Show loading state on section
      this.section.classList.add('gift-threshold-loading');
      
      try {
        const response = await fetch(window.Shopify.routes.root + 'cart/change.js', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            id: giftItem.key,
            quantity: 0
          })
        });
        
        if (!response.ok) {
          throw new Error('Failed to remove gift');
        }
        
        const updatedCart = await response.json();
        
        this.showNotification('Prezent zosta≈Ç usuniƒôty (koszyk poni≈ºej progu)', 'warning');
        
        // Update local cart data
        this.cartData = updatedCart;
        
        // Update cart UI without page refresh
        this.updateCartUI(updatedCart);
        
        // Update gift section UI
        this.updateUI();
        
        // Trigger Dawn theme cart update if available
        if (typeof publish !== 'undefined' && typeof PUB_SUB_EVENTS !== 'undefined') {
          publish(PUB_SUB_EVENTS.cartUpdate, { 
            source: 'free-gift-remove',
            cartData: updatedCart
          });
        }
        
      } catch (error) {
        console.error('Error removing gift:', error);
        this.showNotification('B≈ÇƒÖd podczas usuwania prezentu', 'error');
      } finally {
        this.section.classList.remove('gift-threshold-loading');
      }
    }
    
    updateCartUI(cartData) {
      // Update cart count in header if exists
      const cartCount = document.querySelector('.cart-count-bubble');
      if (cartCount) {
        const count = cartCount.querySelector('span[aria-hidden="true"]');
        if (count) {
          count.textContent = cartData.item_count;
        }
      }
      
      // Update cart items if on cart page
      if (window.location.pathname.includes('/cart')) {
        // Update cart totals
        const cartSubtotal = document.querySelector('.totals__subtotal-value');
        if (cartSubtotal) {
          cartSubtotal.textContent = this.formatMoney(cartData.items_subtotal_price);
        }
        
        const cartTotal = document.querySelector('.totals__total-value');
        if (cartTotal) {
          cartTotal.textContent = this.formatMoney(cartData.total_price);
        }
        
        // Remove gift item row from cart table
        const giftItem = cartData.items.find(item => 
          item.properties && item.properties._is_free_gift === 'true'
        );
        
        if (!giftItem) {
          // Gift was removed, find and remove its row
          const cartRows = document.querySelectorAll('.cart-item');
          cartRows.forEach(row => {
            const titleElement = row.querySelector('.cart-item__name');
            if (titleElement && titleElement.textContent.includes('PREZENT:')) {
              row.style.opacity = '0';
              row.style.transition = 'opacity 0.3s ease';
              setTimeout(() => {
                row.remove();
                // Update row indices
                this.updateCartRowIndices();
              }, 300);
            }
          });
        }
      }
      
      // Update cart drawer if open
      const cartDrawer = document.querySelector('cart-drawer');
      if (cartDrawer && cartDrawer.classList.contains('active')) {
        // Trigger cart drawer refresh
        const cartDrawerItems = document.querySelector('cart-drawer-items');
        if (cartDrawerItems && cartDrawerItems.onCartUpdate) {
          cartDrawerItems.onCartUpdate();
        }
      }
    }
    
    updateCartRowIndices() {
      // Re-index cart items after removal
      const cartItems = document.querySelectorAll('.cart-item');
      cartItems.forEach((item, index) => {
        const newIndex = index + 1;
        // Update IDs
        if (item.id) {
          item.id = item.id.replace(/\d+$/, newIndex);
        }
        // Update quantity input data-index
        const quantityInput = item.querySelector('.quantity__input');
        if (quantityInput) {
          quantityInput.dataset.index = newIndex;
        }
        // Update remove button data-index
        const removeButton = item.querySelector('cart-remove-button');
        if (removeButton) {
          removeButton.dataset.index = newIndex;
        }
      });
    }
    
    formatMoney(cents) {
      return (cents / 100).toFixed(2).replace('.', ',') + ' z≈Ç';
    }
    
    showNotification(message, type = 'info') {
      // Remove existing notifications
      document.querySelectorAll('.gift-notification').forEach(n => n.remove());
      
      const notification = document.createElement('div');
      notification.className = `gift-notification gift-notification--${type}`;
      notification.textContent = message;
      document.body.appendChild(notification);
      
      // Auto-remove after 3 seconds
      setTimeout(() => {
        notification.style.opacity = '0';
        notification.style.transform = 'translateX(100%)';
        setTimeout(() => notification.remove(), 300);
      }, 3000);
      
      // Click to dismiss
      notification.addEventListener('click', () => notification.remove());
    }
  }
  
  // Simple function to disable quantity controls for gift items
  window.protectGiftQuantities = function() {
    fetch(window.Shopify.routes.root + 'cart.js')
      .then(response => response.json())
      .then(cart => {
        cart.items.forEach((item, index) => {
          if (item.properties && item.properties._is_free_gift === 'true') {
            // Find quantity input by variant ID or index
            let input = document.querySelector(`input[data-quantity-variant-id="${item.variant_id}"]`) ||
                       document.querySelector(`#Quantity-${index + 1}`);
            
            if (input) {
              // Disable input
              input.disabled = true;
              input.readOnly = true;
              input.value = 1;
              
              // Disable buttons in the same container
              const container = input.closest('quantity-input');
              if (container) {
                container.querySelectorAll('button').forEach(btn => {
                  btn.disabled = true;
                });
              }
            }
          }
        });
      });
  };
  
  // Run on load and after updates
  document.addEventListener('DOMContentLoaded', window.protectGiftQuantities);
  setInterval(window.protectGiftQuantities, 1000);
  
  // Initialize when DOM is ready
  function initGiftThreshold() {
    document.querySelectorAll('.free-gift-threshold').forEach(section => {
      if (!section.giftManager) {
        section.giftManager = new FreeGiftManager(section);
      }
    });
  }
  
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initGiftThreshold);
  } else {
    initGiftThreshold();
  }
  
  // Re-initialize on Shopify section reloads
  document.addEventListener('shopify:section:load', (event) => {
    const section = event.target.querySelector('.free-gift-threshold');
    if (section) {
      section.giftManager = new FreeGiftManager(section);
    }
  });
})();
</script>

{% schema %}
{
  "name": "Darmowy Prezent - Pr√≥g",
  "tag": "section",
  "class": "free-gift-section",
  "blocks": [
    {
      "type": "gift_product",
      "name": "Produkt prezentowy",
      "settings": [
        {
          "type": "product",
          "id": "product",
          "label": "Produkt"
        }
      ]
    }
  ],
  "settings": [
    {
      "type": "header",
      "content": "‚öôÔ∏è Konfiguracja"
    },
    {
      "type": "number",
      "id": "threshold",
      "label": "Pr√≥g kwotowy (PLN)",
      "default": 250,
      "info": "Minimalna warto≈õƒá koszyka do otrzymania prezentu"
    },
    {
      "type": "header",
      "content": "üìù Teksty"
    },
    {
      "type": "text",
      "id": "title",
      "label": "Tytu≈Ç sekcji",
      "default": "Darmowy prezent"
    },
    {
      "type": "textarea",
      "id": "progress_message",
      "label": "Komunikat przed progiem",
      "default": "Dodaj produkty za [amount] aby otrzymaƒá darmowy prezent!"
    },
    {
      "type": "text",
      "id": "threshold_message",
      "label": "Komunikat po osiƒÖgniƒôciu progu",
      "default": "üéâ Gratulacje! Wybierz sw√≥j darmowy prezent:"
    },
    {
      "type": "text",
      "id": "success_message",
      "label": "Komunikat po dodaniu",
      "default": "Prezent zosta≈Ç dodany do koszyka!"
    },
    {
      "type": "text",
      "id": "add_button_text",
      "label": "Tekst przycisku",
      "default": "Dodaj darmowy prezent"
    },
    {
      "type": "header",
      "content": "üé® WyglƒÖd"
    },
    {
      "type": "checkbox",
      "id": "show_progress_bar",
      "label": "Poka≈º pasek postƒôpu",
      "default": true
    },
    {
      "type": "color",
      "id": "background_color",
      "label": "Kolor t≈Ça",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "border_color",
      "label": "Kolor obramowania",
      "default": "#e5e7eb"
    },
    {
      "type": "color",
      "id": "heading_color",
      "label": "Kolor nag≈Ç√≥wka",
      "default": "#1f2937"
    },
    {
      "type": "color",
      "id": "text_color",
      "label": "Kolor tekstu",
      "default": "#4b5563"
    },
    {
      "type": "color",
      "id": "accent_color",
      "label": "Kolor akcentu",
      "default": "#dc2626"
    },
    {
      "type": "color",
      "id": "button_color",
      "label": "Kolor przycisku",
      "default": "#1f2937"
    },
    {
      "type": "color",
      "id": "button_text_color",
      "label": "Kolor tekstu przycisku",
      "default": "#ffffff"
    }
  ],
  "presets": [
    {
      "name": "Darmowy Prezent - Pr√≥g",
      "category": "Promocje"
    }
  ],
  "templates": ["cart", "product", "collection", "index"]
}
{% endschema %}